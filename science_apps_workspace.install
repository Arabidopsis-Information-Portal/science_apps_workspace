<?php

/**
 * Implements hook_schema();
 */
function science_apps_workspace_schema() {
  $schema['science_apps_workspace_app_config'] = array(
    'description' => 'Table for saving the individual configuration and status for apps.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node} this app belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'aid' => array(
        'description' => 'The primary identifier for this app.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ready' => array(
        'description' => 'Boolean indicating whether the app is ready, i.e. it is checked out and any dependencies are resolved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'published' => array(
        'description' => 'Boolean indicating whether the app is available in the public apps catalog.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'published_apps' => array('nid', 'published'),
      'ready_apps' => array('nid', 'ready'),
    ),
    'unique keys' => array(
      'nid' => array('nid')
    ),
    'foreign keys' => array(
      'app_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('aid'),
  );

  $schema['science_apps_workspace_user_config'] = array(
    'description' => 'Table for saving the workspace configurations for individual users.',
    'fields' => array(
      'wid' => array(
        'description' => 'The primary identifier for a workspace.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this workspace.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'The user-provided name for this workspace.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'config' => array(
        'description' => 'The JSON configuration for this workspace; indicates the row/column/app configuation for the workspace.',
        'type' => 'text',
        'not null' => TRUE,
        // 'default' => '{"rows":[{"column":{"type":"app","app":null}}]}',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the workspace is default.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the workspace was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the workspace was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'workspace_created' => array('created'),
      'workspace_changed' => array('changed'),
    ),
    'foreign keys' => array(
      'workspace_owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('wid'),
  );

  $schema['science_apps_workspace_app_log'] = array(
    'description' => 'Table for saving the individual configuration and status for apps.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary identifier for a log record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The {node} this log record relates to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of log message, for example "user" or "page not found."',
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ),
      'severity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Link to view the result of the event.',
      ),
      'location' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'URL of the origin of the event.',
      ),
      'referer' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'URL of referring page.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Hostname of the user who triggered the event.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ),

    ),
    'indexes' => array(
      'log_nid' => array('nid'),
    ),
    'foreign keys' => array(
      'app_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('lid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 * Set variables for various options.
 */
function science_apps_workspace_install() {
  // by default not published, promoted, or sticky
  variable_set('node_options_science_app', array());

  // by default comments are hidden
  variable_set('comment_science_app', 0);

  // by default no menu options
  variable_set('menu_options_science_app', array());
}

/**
 * Adds science_apps_workspace_app_log table for storage and retreival
 * or messages generated during app processing.
 */
function science_apps_workspace_update_7001(&$sandbox) {
  $schema = array(
    'description' => 'Table for saving the individual configuration and status for apps.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary identifier for a log record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The {node} this log record relates to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of log message, for example "user" or "page not found."',
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ),
      'severity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Link to view the result of the event.',
      ),
      'location' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'URL of the origin of the event.',
      ),
      'referer' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'URL of referring page.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Hostname of the user who triggered the event.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ),

    ),
    'indexes' => array(
      'log_nid' => array('nid'),
    ),
    'foreign keys' => array(
      'app_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('lid'),
  );
  db_create_table('science_apps_workspace_app_log', $schema);
  return 'Added science_apps_workspace_app_log table.';
}

/**
 * Implements hook_uninstall().
 * Unset variables set in install.
 */
function science_apps_workspace_uninstall() {
  variable_del('node_options_science_app');
  variable_del('comment_science_app');
  variable_del('menu_options_science_app');
}

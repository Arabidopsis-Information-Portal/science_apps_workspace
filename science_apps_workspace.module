<?php
/**
 * Implements hook_menu().
 */
function science_apps_workspace_menu(){
  $items = array();

  $items['workspace'] = array(
    'title' => t('Science Apps Workspace'),
    'description' => t('User-configurable workspace for using AIP Science applications'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'science_apps_workspace_page',
    'access arguments' => array('use science apps'),
    'file' => 'science_apps_workspace.pages.inc',
  );

  $items['workspace/configure'] = array(
    'title' => t('Science Apps Workspace Configuration'),
    'description' => t('User-configurable workspace for using AIP Science applications'),
    'type' => MENU_CALLBACK,
    'page callback' => 'science_apps_workspace_config',
    'page arguments' => array(2),
    'access arguments' => array('manage workspaces'),
    'file' => 'science_apps_workspace.pages.inc',
  );

  $items['workspace/new'] = array(
    'title' => t('Create a New Workspace'),
    'description' => t('Form for creating a new science apps workspace'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('science_apps_workspace_edit_form'),
    'access arguments' => array('manage workspaces'),
    'file' => 'science_apps_workspace.pages.inc',
  );

  $items['workspace/edit/%science_apps_workspace'] = array(
    'title' => t('Edit Workspace'),
    'description' => t('Form for creating a new science apps workspace'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('science_apps_workspace_edit_form', 2),
    'access arguments' => array(2),
    'access callback' => 'science_apps_workspace_workspace_access',
    'file' => 'science_apps_workspace.pages.inc',
  );

  $items['workspace/make-default/%science_apps_workspace'] = array(
    'title' => t('Edit Workspace'),
    'description' => t('Form for creating a new science apps workspace'),
    'type' => MENU_CALLBACK,
    'page callback' => 'science_apps_workspace_make_default',
    'page arguments' => array(2),
    'access arguments' => array(2),
    'access callback' => 'science_apps_workspace_workspace_access',
  );

  $items['workspace/prepare-app/%node'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'science_apps_workspace_prepare_app',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('update', 2),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function science_apps_workspace_permission(){
  $perms = array();

  $perms['use science apps'] = array(
    'title' => 'Use Science Apps',
    'description' => 'Users with this permission will be able to use science apps in the workspace',
  );

  $perms['manage workspaces'] = array(
    'title' => 'Manage Science Apps Workspace',
    'description' => 'Users with this permission will be able to customize their workspace',
  );

  $perms['admin science apps'] = array(
    'title' => 'Administer Science Apps',
    'description' => 'Users with this permission will be able to administer science apps',
  );

  return $perms;
}

function science_apps_workspace_workspace_access($workspace) {
  global $user;
  return user_access('admin science apps') || $workspace->uid == $user->uid;
}

/**
 * Implements hook_node_info(). Defines a content type for "Science App".
 *
 */
function science_apps_workspace_node_info() {
  return array(
    'science_app' => array(
      'name' => t('Science App'),
      'base' => 'science_app',
      'title_label' => t('Application Name'),
      'description' => t('An application that will operate within the Science Apps Workspace'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_insert();
 * Add a record to `science_apps_workspace_app_config` for this node.
 */
function science_app_insert($node) {
  db_insert('science_apps_workspace_app_config')
    ->fields(array(
      'nid' => $node->nid,
    ))
    ->execute();
}

/**
 * Implements hook_update();
 * Update the record in `science_apps_workspace_app_config` for this node.
 */
function science_app_update($node) {
  science_apps_workspace_set_app_config_ready($node->nid, FALSE);
}

function science_apps_workspace_set_app_config_ready($nid, $ready = FALSE) {
  db_update('science_apps_workspace_app_config')
    ->fields(array(
      'ready' => ($ready ? 1 : 0)
    ))
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Implements hook_delete();
 * Delete the record in `science_apps_workspace_app_config` for this node.
 */
function science_app_delete($node) {
  db_delete('science_apps_workspace_app_config')
    ->condition('nid', $node->nid)
    ->execute();
}

function science_app_view($node, $view_mode) {

  $node->content['app'] = array(
    '#markup' => theme('science_app_display', array('node' => $node)),
    '#weight' => 10,
  );

  return $node;
}

function science_apps_workspace_node_type_insert($content_type) {
  if ($content_type->type == 'science_app') {
    $body_instance = node_add_body_field($content_type, t('Application Description'));

    // Create all the fields we are adding to our content type.
    foreach (_science_app_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_science_app_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'science_app';
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_form(). Builds a form for creating a "Science App".
 *
 */
function science_app_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_help().
 */
function science_apps_workspace_help($path, $arg) {
  if ($path == 'node/add/science-app') {
    return '<b>Please note:</b> your application will only be available to use by you until it is published.';
  }
}

/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _science_app_installed_fields() {
  return array(
    'science_app_repository' => array(
      'field_name'  => 'science_app_repository',
      'cardinality' => 1,
      'type'        => 'url',
    ),
    'science_app_version' => array(
      'field_name'  => 'science_app_version',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "science_app_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _science_app_installed_instances() {
  return array(
    'science_app_repository' => array(
      'field_name'  => 'science_app_repository',
      'label'       => t('Application repository URL'),
      'description' => t('Please provide the link to the Git repository that contains your Application source code.'),
      'required'    => TRUE,
      'widget'      => array(
        'type'      => 'url_external',
        'weight'    => 1,
      ),
      'display'     => array(
        'default'   => array(
          'label'   => 'above',
          'type'    => 'hidden',
        ),
      ),
    ),
    'science_app_version' => array(
      'field_name'  => 'science_app_version',
      'label'       => t('Release version'),
      'description' => t('Please provide the name of the Git tag to check out. If not provided, the default repository branch (usually <code>master</code>) is used. <strong>It is strongly recommended that you provide a specific version.</strong>'),
      'required'    => FALSE,
      'widget'      => array(
        'type'      => 'text_textfield',
        'weight'    => 2,
      ),
      'display'     => array(
        'default'   => array(
          'label'   => 'above',
          'type'    => 'hidden',
        ),
      ),
    ),
  );
}

function science_apps_workspace_apps_catalog($uid = 0) {
  $catalog = array();

  if ($uid) {
    $user_apps = array();
    $apps = science_apps_workspace_get_user_apps($uid);
    foreach ($apps as $app) {
      $user_apps[$app->nid] = $app->title;
    }
    $catalog[t('User Applications')] = $user_apps;
  }

  $public_apps = array();
  $apps = science_apps_workspace_get_public_apps();
  foreach ($apps as $app) {
    $public_apps[$app->nid] = $app->title;
  }
  $catalog[t('Public Applications')] = $public_apps;

  return $catalog;
}

function science_apps_workspace_get_public_apps() {
  $nids = db_select('science_apps_workspace_app_config', 'conf')
    ->fields('conf', array('nid'))
    ->condition('conf.published', 1)
    ->execute()->fetchCol();
  return node_load_multiple($nids);
}

function science_apps_workspace_get_user_apps($uid) {
  $query = db_select('node', 'n');
  $query->join('science_apps_workspace_app_config', 'config', 'config.nid = n.nid');
  $query->fields('n', array('nid'))
    ->condition('n.type', 'science_app', '=')
    ->condition('n.uid', $uid, '=')
    ->condition('config.ready', 1, '=');
  $nids = $query->execute()->fetchCol();
  return node_load_multiple($nids);
}

function science_apps_workspace_make_default($workspace) {
  global $user;

  db_update('science_apps_workspace_user_config')
    ->fields(array( 'status' => 0 ))
    ->condition('uid', $user->uid)
    ->execute();

  $workspace->status = 1;
  $workspace->save();
  drupal_set_message(t('Default workspace updated!'));
  drupal_goto('workspace/configure');
}

function _science_apps_workspace_apps_repo($app_nid = null) {
  $path = 'private://' . variable_get('science_apps_workspaces_apps_repository', 'science_apps_repository');
  if ($app_nid) {
    $path = $path . DIRECTORY_SEPARATOR . $app_nid;
  }
  return $path;
}

/**
 * Implements hook_cron().
 * Scheduled tasks include:
 * 1. Finding science apps that need repository checked out
 *
 */
function science_apps_workspace_cron() {
  $apps_repository = _science_apps_workspace_apps_repo();
  if (! file_prepare_directory($apps_repository, FILE_CREATE_DIRECTORY)) {
    watchdog('science_apps_workspace', 'Unable to prepare the Science Apps Repository in @path!', array('@path' => $apps_repository), WATCHDOG_ERROR);
  }

  // load apps that still need to be checked out and dependencies resolved
  $nids = db_select('science_apps_workspace_app_config', 'app')
    ->fields('app', array('nid'))
    ->condition('ready', '0')
    ->range(0, 10)
    ->execute()
    ->fetchAssoc();

  if ($nids && count($nids) > 0) {
    foreach ($nids as $nid) {
      _science_apps_workspace_prepare_app($nid);
    }
  }
}

function science_apps_workspace_prepare_app($node) {
  _science_apps_workspace_prepare_app($node->nid);
  drupal_goto('node/'.$node->nid);
}

function _science_apps_workspace_prepare_app($nid) {
   $checkout = FALSE;
   $dependencies = FALSE;

   $checkout = _science_apps_workspace_app_repo_checkout($nid);

   if (_science_apps_workspace_app_dependencies_ready($nid)) {
     $dependencies = TRUE;
   } else {
     $dependencies = _science_apps_workspace_app_dependencies_process($nid);
   }

   if ($checkout && $dependencies) {
     // update app config record
     science_apps_workspace_set_app_config_ready($nid, TRUE);
   }
}

function _science_apps_workspace_app_repo_ready($app_nid) {
  $app_repo = _science_apps_workspace_apps_repo($app_nid);
  return file_prepare_directory($app_repo);
}

function _science_apps_workspace_app_repo_checkout($app_nid) {
  $app = node_load($app_nid);
  $repository_url = $app->science_app_repository['und'][0]['value'];
  $checkout_dir = _science_apps_workspace_apps_repo($app_nid);
  if (file_prepare_directory($checkout_dir)) {
    // updating this app
    $cmd = array();
    $cmd[] = 'cd ' . drupal_realpath($checkout_dir);
    $cmd[] = 'git checkout -f master';
    $cmd[] = 'git pull';
    if ($app->science_app_version && isset($app->science_app_version['und'][0]['value'])) {
      $cmd[] = 'git checkout ' . escapeshellarg($app->science_app_version['und'][0]['value']);
    }
    $output = exec(implode(';', $cmd), $output_log, $return_val);
    if ($return_val != 0) {
      $output_log[] = $output;
      watchdog('science_apps_workspace', 'Git update for %application failed from url: @url; Logs: @logs', array('%application' => $app->title, '@url' => $repository_url, '@logs' => implode("\n", $output_log)), WATCHDOG_ERROR);
    } else {
      watchdog('science_apps_workspace', 'Successfully updated repository for %application from url: @url; Logs: @log', array('%application' => $app->title,'@url' => $repository_url,'@log' => $output), WATCHDOG_INFO);
      return TRUE;
    }
  } else if (file_prepare_directory($checkout_dir, FILE_CREATE_DIRECTORY)) {
    $checkout_dir_realpath = drupal_realpath($checkout_dir);
    $git_command = escapeshellcmd(implode(' ', array('git clone', $repository_url, $checkout_dir_realpath)));
    exec($git_command, $git_log, $return_val);
    if ($return_val != 0) {
      watchdog('science_apps_workspace', 'Unable to clone repository for %application from url: @url', array('%application' => $app->title,'@url' => $repository_url), WATCHDOG_ERROR);
    } else {
      watchdog('science_apps_workspace', 'Successfully cloned repository for %application from url: @url', array('%application' => $app->title,'@url' => $repository_url), WATCHDOG_INFO);
      return TRUE;
    }
  } else {
    watchdog('science_apps_workspace', 'Unable to create checkout directory for %application at @path!', array('%application' => $app->title,'@path' => $checkout_dir), WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Returns the path where app dependencies are checked out and served from.
 * Defaults to /sites/all/libraries/science_apps_workspace/bower_components.
 * This path should be on the public filesystem.
 */
function _science_apps_dependency_path() {
  return variable_get('science_apps_workspace_app_dependency_path', implode(DIRECTORY_SEPARATOR, array('sites','all','libraries','science_apps_workspace')));
}

function _science_apps_workspace_app_dependencies_list($app_nid) {
  $deps = array();
  $app_dir = _science_apps_workspace_apps_repo($app_nid);
  if (is_file($app_dir . DIRECTORY_SEPARATOR . 'bower.json')) {
    $bower = json_decode(file_get_contents($app_dir . DIRECTORY_SEPARATOR . 'bower.json'));
    $semver_regex = '/^[<>=~v]?(\d+\.\d+)(.*)?$/'; // permissive semver
    foreach($bower->dependencies as $lib => $version) {
      $lib = strtolower($lib);
      $version = strtolower($version);
      // hopefully the version is semver
      if (preg_match($semver_regex, $version)) {
        $name = $lib . '-' . preg_replace($semver_regex, '\1\2', $version);
        $deps[$name] = $lib . '#' . $version;
      } else {
        // do our best
        $name = $lib . '-' . preg_replace('/[^[:alnum:].]+/', '-', $version);
        $deps[$name] = $version;
      }
    }
  }
  return $deps;
}

function _science_apps_workspace_app_dependencies_ready($app_nid) {
  $ready = FALSE;
  $deps = _science_apps_workspace_app_dependencies_list($app_nid);
  foreach ($deps as $lib => $version) {
    $dep_path = _science_apps_dependency_path() . DIRECTORY_SEPARATOR . 'bower_components' . DIRECTORY_SEPARATOR . $lib . DIRECTORY_SEPARATOR;
    if (is_dir($dep_path)) {
      if (is_file($dep_path . 'bower.json')) {
        $bower_path = $dep_path . 'bower.json';
      }
      // check for old component.json file
      else if (is_file($dep_path . 'component.json')) {
        $bower_path = $dep_path . 'component.json';
      }

      if ($bower_path) {
        $bower = json_decode(file_get_contents($bower_path));
        if ($bower->main) {
          // package exists, files declared, check that none missing
          $ready = TRUE;

          if (is_array($bower->main)) {
            // check each dependency
            foreach ($bower->main as $main) {
              if (! is_file($dep_path . $main)) {
                watchdog('science_apps_workspace', 'SciApp (nid=%application) declared dependency (%lib, %version) declares "%main" in bower.json. File not found. Dependency loading will fail.', array('%application' => $app_nid, '%lib' => $lib, '%version' => $version, '%main' => $main), WATCHDOG_ERROR);
                $ready = FALSE;
              }
            }
          } else if (! is_file($dep_path . $bower->main)) {
            watchdog('science_apps_workspace', 'SciApp (nid=%application) declared dependency (%lib, %version) declares "%main" in bower.json. File not found. Dependency loading will fail.', array('%application' => $app_nid, '%lib' => $lib, '%version' => $version, '%main' => $bower->main), WATCHDOG_ERROR);
            $ready = FALSE;
          }
        } else {
          drupal_set_message(t('Unable to load dependency %lib: bower.json missing "main" declaration.', array('%lib' => $lib), 'error'));
          watchdog('science_apps_workspace', 'SciApp (nid=%application) declared dependency (%lib, %version) undeclared "main" in bower.json. Dependency loading will fail.', array('%application' => $app_nid, '%lib' => $lib, '%version' => $version), WATCHDOG_ERROR);
        }
      } else {
        drupal_set_message(t('Unable to load dependency %lib: bower.json missing.', array('%lib' => $lib), 'error'));
        watchdog('science_apps_workspace', 'SciApp (nid=%application) declared dependency (%lib, %version) is missing bower.json. Dependency loading will fail.', array('%application' => $app_nid, '%lib' => $lib, '%version' => $version), WATCHDOG_ERROR);
      }
    } else {
      watchdog('science_apps_workspace', 'SciApp (nid=%application) declared dependency (%lib, %version) has not been prepared yet.', array('%application' => $app_nid, '%lib' => $lib, '%version' => $version), WATCHDOG_ERROR);
    }
  }
  return $ready;
}

function _science_apps_workspace_app_dependencies_process($app_nid) {

  $dependencies_dir = _science_apps_dependency_path();
  if (file_prepare_directory($dependencies_dir, FILE_CREATE_DIRECTORY)) {
    $bower_commands = array();
    $deps = _science_apps_workspace_app_dependencies_list($app_nid);
    foreach ($deps as $lib => $version) {
      $dep_path = implode(DIRECTORY_SEPARATOR, array($dependencies_dir, 'bower_components', $lib));
      if (! is_dir($dep_path)) {
        $bower_commands[] = 'bower install ' . escapeshellarg($lib . '=' . $version);
      }
    }

    if (count($bower_commands) > 0) {
      array_unshift($bower_commands, escapeshellcmd('cd ' . drupal_realpath(_science_apps_dependency_path())));
      $cmd = implode(';', $bower_commands);
      watchdog('science_apps_workspace', 'Dependency command for SciApp nid=@app :'."\n".'@cmd', array('@app' => $app_nid,'@cmd' => $cmd), WATCHDOG_INFO);
      $out = exec($cmd, $bower_log, $return_var);
      if ($return_var != 0) {
        watchdog('science_apps_workspace', 'Processing dependencies for SciApp nid=@app failed:'."\n".'@errors', array('@app' => $app_nid,'@errors' => $out.$return_var.implode("\n", $bower_log)), WATCHDOG_ERROR);
      } else {
        watchdog('science_apps_workspace', 'Processed dependencies for SciApp nid=@app:'."\n".'@output', array('@app' => $app_nid,'@output' => implode("\n", $bower_log)), WATCHDOG_INFO);
        return TRUE;
      }
    }
  } else {
    watchdog('science_apps_workspace', 'Processing dependencies for SciApp nid=@app failed: unable to create directory for science_apps_dependency_path @path', array('@app' => $app_nid,'@path' => $dependencies_dir), WATCHDOG_ERROR);
  }
  return FALSE;
}

function science_apps_workspace_theme() {
  return array(
    'science_app_display' => array(
      'variables' => array(
        'node' => null,
      ),
    ),
  );
}

function theme_science_app_display($vars) {
  $node = $vars['node'];

  $app_ready = FALSE;

  $prep_steps = array(
    array('name' => t('Application checked out'), 'status' => 0),
    array('name' => t('Dependencies resolved'), 'status' => 0),
    array('name' => t('Files ready'), 'status' => 0),
  );

  // check that app is checkout out
  if (_science_apps_workspace_app_repo_ready($node->nid)) {
    $prep_steps[0]['status'] = 1;

    // check that app dependencies are ready
    if (_science_apps_workspace_app_dependencies_ready($node->nid)) {
      $prep_steps[1]['status'] = 1;

      $app = db_select('science_apps_workspace_app_config', 'app')
        ->fields('app')
        ->condition('app.nid', $node->nid)
        ->execute()->fetch();

      if ($app->ready) {
        $prep_steps[2]['status'] = 1;

        // load app dependencies
        if (science_apps_workspace_load_libraries(_science_apps_workspace_app_dependencies_list($node->nid))) {
          $app_ready = TRUE;
        }
      }
    }
  }

  if ($app_ready) {
    $app_dir = _science_apps_workspace_apps_repo($node->nid);
    // add app.css
    drupal_add_css(file_get_contents(implode(DIRECTORY_SEPARATOR, array($app_dir, 'app', 'styles', 'app.css'))), array('type' => 'inline', 'scope' => 'header', 'group' => 200));
    // add app.js
    drupal_add_js(file_get_contents(implode(DIRECTORY_SEPARATOR, array($app_dir, 'app', 'scripts', 'app.js'))), array('type' => 'inline', 'scope' => 'footer'));
    // return app.html
    return file_get_contents(implode(DIRECTORY_SEPARATOR, array($app_dir, 'app', 'app.html')));
  } else {
    drupal_set_message('This application is still being prepared. Please be patient.', 'warning');
    $output = '<div class="science-app-pending">';
    $output .= '<h1><i class="fa fa-refresh fa-spin"></i> Preparing this application...</h1>';
    $output .= '<p>We are still getting this application ready. Please check back soon!</p>';
    $output .= '<p>'.l(t('Check Now'), 'workspace/prepare-app/'.$node->nid, array('attributes' => array('class' => 'btn btn-primary'))).'</p>';

    $items = array();
    foreach ($prep_steps as $step) {
      $items[] = '<i class="fa fa-' . ($step['status'] ? 'check-square-o' : 'square-o') . '"></i> ' . $step['name'];
    }
    $output .= theme('item_list', array('items' => $items, 'title' => t('Status'), 'attributes' => array('class' => 'list-unstyled')));

    $output .= '</div>';
    return $output;
  }
}

/**
 * Adds the necessary files for these libraries to the page.
 * @param $libraries
 *    An array of libraries to load from sites/all/libraries/science_apps_workspace/bower_components
 */
function science_apps_workspace_load_libraries($libraries) {
  $loaded = TRUE;

  error_log(print_r($libraries,1));

  $base_path = _science_apps_dependency_path() . DIRECTORY_SEPARATOR . 'bower_components';
  foreach ($libraries as $library => $version) {
    $lib_path = $base_path . DIRECTORY_SEPARATOR . $library . DIRECTORY_SEPARATOR;
    if (is_file($lib_path . 'bower.json')) {
      $bower_path = $lib_path . 'bower.json';
    } else if (is_file($lib_path . 'component.json')) {
      $bower_path = $lib_path . 'component.json';
    }
    if ($bower_path) {
      // load the library bower.json
      $bower = json_decode(file_get_contents($bower_path));

      // load each file in $bower->main with
      $main_files = is_array($bower->main) ? $bower->main : array($bower->main);
      foreach ($main_files as $file) {
        if (substr($file, -3) === 'css') {
          drupal_add_css($lib_path.$file, 'file');
        } else {
          drupal_add_js($lib_path.$file, array('type' => 'file', 'scope' => 'footer', 'preprocess' => FALSE, 'weight' => 0));
        }
      }
    } else {
      $loaded = FALSE;
    }
  }
  return $loaded;
}

function science_apps_workspace_load($wid) {
  return Workspace::get($wid);
}
